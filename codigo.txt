# -*- coding: utf-8 -*-
"""
Automação MK Compliance – versão 17-Jun-2025
Ajustes:
• Vai direto para /mk/admin.html#/cfghome depois do SSO
• Remove cliques em "Vinicius"
• Header Excel começa na linha 2 (pandas header=1)
• Usa só C:\Temp\mk_downloads
• Valida colunas obrigatórias
"""

import os
import sys
import time
import shutil
from datetime import datetime
from pathlib import Path

import pandas as pd
from playwright.sync_api import Playwright, sync_playwright, expect


# ----------------------------------------------------------------------
# Funções de log (compatíveis com KNIME)
# ----------------------------------------------------------------------
def klog(msg: str):
    print(msg)
    sys.stdout.flush()


def kerr(msg: str):
    print(f"ERROR: {msg}")
    sys.stderr.flush()


# ----------------------------------------------------------------------
# Caminhos
# ----------------------------------------------------------------------
PROFILE_DIR = Path(
    r"N:/DCGV/Compliance/Compliance RO Varejo/Analytics/Projetos/AgendaNormativa/edge_profile/edge_profile"
).resolve()

TEMP_DIR = Path(r"C:/Temp/mk_downloads").resolve()   # único diretório usado
TEMP_DIR.mkdir(parents=True, exist_ok=True)

# ----------------------------------------------------------------------
# URLs relevantes
# ----------------------------------------------------------------------
LOGIN_INIT_URL = (
    "https://bv.mkcompliance.com.br/auth/realms/alfresco/protocol/openid-connect/auth"
    "?response_type=code&client_id=alfresco"
    "&redirect_uri=https://bv.mkcompliance.com.br/mk/compliance.html"
)

ADMIN_URL = "https://bv.mkcompliance.com.br/mk/admin.html#/cfghome"
LOGIN_SERVICE_BASE = (
    "https://bv.mkcompliance.com.br/auth/realms/alfresco/protocol/openid-connect/auth"
)

# ----------------------------------------------------------------------
# Configurações gerais
# ----------------------------------------------------------------------
TIMEOUT_MS = 90_000
REQUIRED_COLS = [
    "login", "Nome", "Sobrenome", "E-mail", "Telefone",
    "Departamento", "Área", "Perfil", "Segmento",
]


# ----------------------------------------------------------------------
# Função principal de automação
# ----------------------------------------------------------------------
def run(playwright: Playwright) -> pd.DataFrame:
    """Abre o navegador, faz o SSO, baixa o Excel e devolve DataFrame validado."""
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    file_name = f"pontosfocaisMK_{timestamp}.xlsx"
    file_path = TEMP_DIR / file_name

    df = pd.DataFrame()
    ctx = page = None

    try:
        ctx = playwright.chromium.launch_persistent_context(
            user_data_dir=PROFILE_DIR,
            channel="msedge",
            headless=False,
            timeout=TIMEOUT_MS,
        )
        page = ctx.new_page()

        # ------------------------------------------------------------------
        # 1. Login / SSO
        # ------------------------------------------------------------------
        klog(f"Abrindo URL de login: {LOGIN_INIT_URL}")
        page.goto(LOGIN_INIT_URL, wait_until="domcontentloaded", timeout=TIMEOUT_MS)

        if page.url.startswith(LOGIN_SERVICE_BASE):
            klog("SSO necessário – clicando em 'Microsoft'.")
            expect(page.get_by_role("link", name="Microsoft")).to_be_visible(timeout=TIMEOUT_MS)
            page.get_by_role("link", name="Microsoft").click()
            page.wait_for_url("https://bv.mkcompliance.com.br/mk/compliance.html**", timeout=TIMEOUT_MS)
        else:
            klog("Sessão já autenticada – pulando SSO.")

        # ------------------------------------------------------------------
        # 2. Vai direto para admin.html#/cfghome
        # ------------------------------------------------------------------
        klog(f"Navegando para {ADMIN_URL}")
        page.goto(ADMIN_URL, wait_until="domcontentloaded", timeout=TIMEOUT_MS)

        # Aguarda o link/elemento “Gestão de Usuários Permite” nessa página
        expect(page.get_by_text("Gestão de Usuários Permite")).to_be_visible(timeout=TIMEOUT_MS)
        page.get_by_text("Gestão de Usuários Permite").click()
        time.sleep(2)   # pequena pausa para UI carregar

        # ------------------------------------------------------------------
        # 3. Download do Excel
        # ------------------------------------------------------------------
        expect(page.get_by_role("button", name="Excel")).to_be_visible(timeout=TIMEOUT_MS)
        klog("Iniciando download do Excel…")
        with page.expect_download(timeout=TIMEOUT_MS) as dl_info:
            page.get_by_role("button", name="Excel").click()

        download = dl_info.value
        download.save_as(file_path)
        klog(f"Arquivo salvo em: {file_path}")

        # Aguarda tamanho estabilizar (proteção contra lock/antivírus)
        last = -1
        while True:
            sz = os.path.getsize(file_path)
            if sz == last:
                break
            last = sz
            time.sleep(0.5)

        # ------------------------------------------------------------------
        # 4. Leitura e validação
        # ------------------------------------------------------------------
        df = pd.read_excel(file_path, header=1, dtype=str)   # linha 2 zero-index = 1
        klog(f"Tamanho do arquivo: {os.path.getsize(file_path):,} bytes")
        klog(f"Colunas importadas ({len(df.columns)}): {list(df.columns)}")

        if not all(col in df.columns for col in REQUIRED_COLS):
            kerr("Colunas obrigatórias faltando – descartando DataFrame.")
            df = pd.DataFrame()
        else:
            klog("✔ Todas as colunas obrigatórias presentes.")

        # ------------------------------------------------------------------
        # 5. Limpeza (opcional)
        # ------------------------------------------------------------------
        try:
            os.remove(file_path)
            klog("Arquivo físico deletado após importação.")
        except OSError as e:
            kerr(f"Não foi possível apagar {file_path}: {e}")

    except Exception as e:
        kerr(f"Falha geral: {e}")
        if page:
            page.screenshot(path=TEMP_DIR / "erro_automacao.png")
    finally:
        if ctx:
            ctx.close()

    return df


# ----------------------------------------------------------------------
# Execução (p/ nó Python do KNIME)
# ----------------------------------------------------------------------
output_table = pd.DataFrame()

try:
    with sync_playwright() as pw:
        output_table = run(pw)

    if output_table.empty:
        kerr("Processo terminou mas DataFrame está vazio.")
    else:
        klog("Processo concluído com sucesso e DataFrame carregado.")
except Exception as e:
    kerr(f"Erro na execução principal: {e}")
    output_table = pd.DataFrame()

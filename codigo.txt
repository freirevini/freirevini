# login_once.py
from pathlib import Path
from playwright.sync_api import sync_playwright, expect
import shutil 
import os     
import pandas as pd # <-- NOVO: Importar pandas para criar o DataFrame de saída

# --- Configurações ---
PROFILE = Path("N:/DCGV/Compliance/Compliance RO Varejo/Analytics/Projetos/AgendaNormativa/edge_profile/edge_profile").resolve()

LOGIN_INIT_URL = "https://bv.mkcompliance.com.br/"
TARGET_APP_URL_BASE = "https://bv.mkcompliance.com.br/"

# --- NOVA ETAPA: Limpar o diretório de perfil antes de iniciar ---
print(f"*** INICIANDO LIMPEZA DO PERFIL ***")
print(f"Caminho do perfil a ser limpo: {PROFILE}")

if PROFILE.exists() and PROFILE.is_dir():
    try:
        shutil.rmtree(PROFILE)
        print(f"Diretório '{PROFILE}' e todo o seu conteúdo foram apagados com sucesso.")
    except OSError as e:
        print(f"Erro ao apagar o diretório '{PROFILE}': {e}")
        print("Pode ser necessário fechar qualquer processo que esteja usando esta pasta.")
else:
    print(f"Diretório '{PROFILE}' não encontrado ou não é um diretório válido. Não há nada para limpar.")

print(f"Verificando/Criando diretório de perfil vazio: {PROFILE}")
PROFILE.mkdir(parents=True, exist_ok=True)
print(f"*** LIMPEZA CONCLUÍDA. DIRETÓRIO PRONTO PARA USO. ***\n")

# --- Fim da nova etapa ---

# Variável para armazenar o status final
script_status = "Falha no processo de login."

with sync_playwright() as p:
    ctx = p.chromium.launch_persistent_context(
        user_data_dir=PROFILE, 
        channel="msedge",  
        headless=False,    
        args=["--start-maximized"] 
    )
    page = ctx.new_page()

    try:
        print(f"Navegando para a URL de início do login: {LOGIN_INIT_URL}")
        page.goto(LOGIN_INIT_URL, wait_until="domcontentloaded", timeout=60000)

        print("Aguardando o botão 'Microsoft' aparecer...")
        microsoft_button = page.get_by_role("link", name="Microsoft")
        expect(microsoft_button).to_be_visible(timeout=20000) 

        print("Clicando no botão 'Microsoft'...")
        microsoft_button.click()

        print(f"Aguardando a conclusão do login e redirecionamento para: {TARGET_APP_URL_BASE}...")
        page.wait_for_url(TARGET_APP_URL_BASE + "**", timeout=90000) 
        
        print("\nLogin no perfil do Edge salvo com SUCESSO!")
        print(f"O perfil está salvo em: {PROFILE}")
        print("Você pode fechar a janela do navegador. Agora, seu script principal deve estar logado.")
        
        script_status = "Login no perfil do Edge salvo com sucesso!" # Atualiza o status em caso de sucesso

    except Exception as e:
        print(f"\nERRO durante o processo de login: {e}")
        print("Verifique se você interagiu corretamente com a tela de login da Microsoft (se apareceu).")
        print(f"Pode ser necessário limpar o diretório '{PROFILE}' e tentar novamente.")
        script_status = f"Erro no processo de login: {e}" # Atualiza o status em caso de erro

    finally:
        print("Fechando contexto do navegador...")
        ctx.close()

# --- NOVO: Definir a saída para o Knime ---
# Para o nó 'Python Script' (legacy ou Labs com configurações padrão):
output_table = pd.DataFrame({"StatusExecucao": [script_status]})

# Se você estiver usando o nó 'Python Script (Labs)' e definindo explicitamente as saídas via knime.scripting.io:
# from knime.scripting import io as knio
# output_table_1 = pd.DataFrame({"StatusExecucao": [script_status]})
# knio.send_tables(output_table_1) # Se você usar múltiplas saídas, precisaria disso.

# login_once.py
# -----------------------------------------------------------
# Cria (ou reseta, se --reset) o perfil do Edge, faz login
# manual no MKCompliance e grava cookies/layout.
# Use apenas quando precisar refazer o login.
# -----------------------------------------------------------

from pathlib import Path
from playwright.sync_api import sync_playwright, expect
import argparse
import sys
import shutil
import pandas as pd
import os

# -----------------------------------------------------------
# 1. Argumentos de linha de comando
# -----------------------------------------------------------
parser = argparse.ArgumentParser(
    description="Salva o login do MKCompliance no perfil do Edge."
)
parser.add_argument(
    "--reset",
    action="store_true",
    help="Apaga o diretório de perfil antes de iniciar (use só se precisar refazer tudo).",
)
args = parser.parse_args()

# -----------------------------------------------------------
# 2. Caminho do perfil a ser usado pelo Playwright
#    (mesmo caminho que o script principal usará depois)
# -----------------------------------------------------------
PROFILE = Path(
    r"N:/DCGV/Compliance/Compliance RO Varejo/Analytics/Projetos/AgendaNormativa/edge_profile/edge_profile"
).resolve()

# -----------------------------------------------------------
# 3. URLs
# -----------------------------------------------------------
LOGIN_INIT_URL = "https://bv.mkcompliance.com.br/"
TARGET_APP_URL_BASE = "https://bv.mkcompliance.com.br/"

# -----------------------------------------------------------
# 4. Se --reset, apaga a pasta inteira
# -----------------------------------------------------------
if args.reset and PROFILE.exists():
    print(f"[RESET] Apagando perfil antigo em: {PROFILE}")
    shutil.rmtree(PROFILE)
    print("Perfil apagado.\n")

# Garante que a pasta exista
PROFILE.mkdir(parents=True, exist_ok=True)
print(f"Perfil em uso: {PROFILE}")

# -----------------------------------------------------------
# 5. Abre o Edge (perfil real, sem --inprivate)
# -----------------------------------------------------------
status_msg = "Falha no login"

with sync_playwright() as pw:
    ctx = pw.chromium.launch_persistent_context(
        user_data_dir=str(PROFILE),
        channel="msedge",
        headless=False,
        timeout=90_000,
        args=["--profile-directory=Default"],  # garante usar o subdir correto
    )
    page = ctx.new_page()

    try:
        print("Abrindo página inicial…")
        page.goto(LOGIN_INIT_URL, wait_until="domcontentloaded", timeout=60_000)

        # Aguarda e clica “Microsoft” se aparecer
        if page.get_by_role("link", name="Microsoft").is_visible(timeout=5_000):
            print("Clicando em 'Microsoft' para SSO…")
            page.get_by_role("link", name="Microsoft").click()

        print("Faça o login manual se solicitado (MFA, senha, etc.).")
        print("Depois que abrir o MKCompliance, feche a janela do Edge.")

        # Espera o usuário concluir (ou Ctrl+C para abortar)
        page.wait_for_url(TARGET_APP_URL_BASE + "**", timeout=0)  # 0 = infinito
        print("URL final atingida, salvando informações de sessão…")

        status_msg = "Login salvo com sucesso."
    except KeyboardInterrupt:
        print("\nExecução interrompida pelo usuário (Ctrl+C).")
        status_msg = "Interrompido pelo usuário."
    except Exception as e:
        print(f"\n[ERRO] Durante o login: {e}")
        status_msg = f"Erro no login: {e}"
    finally:
        ctx.close()
        print("Navegador fechado.")

# -----------------------------------------------------------
# 6. Saída para KNIME (opcional)
# -----------------------------------------------------------
output_table = pd.DataFrame({"StatusExecucao": [status_msg]})
print(f"\nStatus: {status_msg}")

# input_table: DataFrame de entrada vindo do KNIME
import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans

df = input_table.copy()

# ---------- parâmetros facilmente ajustáveis ----------
PCT_QTD  = 0.75   # percentil para linha de corte de quantidade
PCT_VAL  = 0.75   # percentil para linha de corte de valor
N_KMEANS = 4      # n.º de clusters K-Means

# ---------- função de rotulagem por quadrante ----------
def classify(row, qtd_hi, val_hi, qtd_col, val_col):
    high_qtd = row[qtd_col] >= qtd_hi
    high_val = row[val_col] >= val_hi
    if  high_qtd and  high_val:
        return "Apostador Ativo"
    if  high_qtd and not high_val:
        return "Apostador Regular"
    if not high_qtd and  high_val:
        return "High-Stake Ocasional"
    return "Apostador Esporádico"

# ---------- linhas de corte ----------
qtd_ap_hi = df["QtdTotalApostas"].quantile(PCT_QTD)
val_ap_hi = df["VlrTotalApostas"].quantile(PCT_VAL)

qtd_sq_hi = df["QtdTotalSaque"].quantile(PCT_QTD)
val_sq_hi = df["VlrTotalSaque"].quantile(PCT_VAL)

# ---------- clusters rule-based ----------
df["Cluster_Aposta"] = df.apply(
    classify, axis=1,
    args=(qtd_ap_hi, val_ap_hi, "QtdTotalApostas", "VlrTotalApostas")
)
df["Cluster_Saque"] = df.apply(
    classify, axis=1,
    args=(qtd_sq_hi, val_sq_hi, "QtdTotalSaque", "VlrTotalSaque")
)

# ---------- K-Means opcional cruzado ----------
features = df[["QtdTotalApostas","VlrTotalApostas",
               "QtdTotalSaque"  ,"VlrTotalSaque"  ]]
scaled   = StandardScaler().fit_transform(features)
df["KMeansCluster"] = (
    KMeans(n_clusters=N_KMEANS, random_state=42)
    .fit_predict(scaled)
)

# ---------- devolver ao KNIME ----------
output_table = df

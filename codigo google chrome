# ==============================================================================
# CLASSIFICAÇÃO DE APOSTADORES – KNIME PYTHON SCRIPT
# Fonte dos critérios: DataSenado, Anbima/Datafolha, Locomotiva, Banco Central, Fecomercio-SP (2023–2025)
# ==============================================================================

import pandas as pd

# --- Cópia segura dos dados de entrada do KNIME ---
df = input_table.copy()

# --- Garantia de tipo numérico nas colunas relevantes ---
df["QtdTotalApostas"] = pd.to_numeric(df["QtdTotalApostas"], errors="coerce").fillna(0)
df["VlrTotalApostas"] = pd.to_numeric(df["VlrTotalApostas"], errors="coerce").fillna(0)
df["QtdTotalSaque"]   = pd.to_numeric(df["QtdTotalSaque"], errors="coerce").fillna(0)
df["VlrTotalSaque"]   = pd.to_numeric(df["VlrTotalSaque"], errors="coerce").fillna(0)

# --- Funções de classificação baseadas em critérios oficiais de comportamento ---
def classificar_apostas(row):
    qtd = row['QtdTotalApostas']
    val = row['VlrTotalApostas']
    
    if qtd == 0 and val == 0:
        return "Não Apostador"
    elif qtd >= 4 and val > 200:
        return "Apostador Ativo"
    elif qtd <= 1 and val <= 100:
        return "Apostador Esporádico"
    elif qtd <= 3 and val > 500:
        return "High-Stake Ocasional"
    else:
        return "Apostador Regular"

def classificar_saques(row):
    qtd = row['QtdTotalSaque']
    val = row['VlrTotalSaque']
    
    if qtd == 0 and val == 0:
        return "Não Apostador"
    elif qtd >= 4 and val > 200:
        return "Apostador Ativo"
    elif qtd <= 1 and val <= 100:
        return "Apostador Esporádico"
    elif qtd <= 3 and val > 500:
        return "High-Stake Ocasional"
    else:
        return "Apostador Regular"

# --- Aplicação das classificações ao DataFrame ---
df["Cluster_Aposta"] = df.apply(classificar_apostas, axis=1)
df["Cluster_Saque"]  = df.apply(classificar_saques, axis=1)

# --- Devolução para o KNIME ---
output_table = df

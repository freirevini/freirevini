import os
import time
import pandas as pd
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.action_chains import ActionChains
#from webdriver_manager.chrome import ChromeDriverManager # Removido
from selenium.webdriver.support.ui import Select
#from selenium.webdriver.chrome.service import Service # Removido

# ==============================================
# CONFIGURAÇÕES INICIAIS
# ==============================================
# Configurar diretório de download
download_dir = r'C:\Users\vinicius.silva\Downloads\teste'  # Altere para seu caminho
os.makedirs(download_dir, exist_ok=True)
print(f"Diretório de download configurado: {download_dir}")

# Configurar opções do Chrome
options = webdriver.ChromeOptions()
prefs = {
    "download.default_directory": download_dir,
    "download.prompt_for_download": False,
    "download.directory_upgrade": True,
    #"safebrowsing.enabled": False #Removido (opcional)
}
options.add_experimental_option("prefs", prefs)
print("Opções do Chrome configuradas.")


# Iniciar navegador
#service = Service(ChromeDriverManager().install()) # Removido
driver = webdriver.Chrome() # Usando apenas options
print("Navegador Chrome iniciado.")

wait = WebDriverWait(driver, 25)
action = ActionChains(driver)

# ==============================================
# FUNÇÃO PARA OBTER ARQUIVO MAIS RECENTE
# ==============================================
def get_latest_file():
    files = [os.path.join(download_dir, f) for f in os.listdir(download_dir)]
    return max(files, key=os.path.getctime, default=None)

# ==============================================
# EXECUÇÃO PRINCIPAL
# ==============================================
try:
    # Abrir o site
    driver.get("https://bv.mkcompliance.com.br/")
    print("Site aberto.")

    # ------------------------------------------
    # PASSO 1: Login com Microsoft
    # ------------------------------------------
    microsoft_btn = wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="social-microsoft"]')))
    print("Botão de login da Microsoft encontrado.")
    microsoft_btn.click()
    print("Botão de login da Microsoft clicado.")

    # Esperar redirecionamento e fazer login manual
    wait.until(EC.url_contains("login.microsoftonline.com"))
    print("Redirecionado para a página de login da Microsoft.")
    input("Faça o login manualmente e pressione Enter para continuar...")
    print("Login manual realizado.")

    # ------------------------------------------
    # PASSO 2: Navegação no sistema
    # ------------------------------------------
    # Ativar painel esquerdo
    action.move_to_element_with_offset(driver.find_element(By.TAG_NAME, 'body'), 0, 100).perform()
    time.sleep(2)
    print("Painel esquerdo ativado.")

    # Acessar menus
    menu_principal = wait.until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="leftside-menu-container"]/div[1]/div[2]/div/div/div/ul/li[6]/a/span[1]')
    ))
    print("Menu principal encontrado.")
    menu_principal.click()
    print("Menu principal clicado.")

    submenu = wait.until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="normappmenu"]/ul/li[5]/a')
    ))
    print("Submenu encontrado.")
    submenu.click()
    print("Submenu clicado.")

    # ------------------------------------------
    # PASSO 3: Selecionar relatório
    # ------------------------------------------
    opcao_18 = wait.until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="mk-form-container"]/ol/li[18]/a')
    ))
    print("Opção de relatório 18 encontrada.")
    opcao_18.click()
    print("Opção de relatório 18 clicada.")

    # ------------------------------------------
    # PASSO 4: Configurar filtros
    # ------------------------------------------

    dropdown_segmentacao = wait.until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="mkreportsegsearch"]')
    ))
    print("Dropdown de segmentação encontrado.")

    #Select Dropdown
    select = Select(dropdown_segmentacao)

    #Selecionar por texto visivel
    select.select_by_visible_text("Todos os segmentos")
    print("Opção 'Todos os segmentos' selecionada no dropdown.")

    wait.until(EC.element_to_be_clickable(
        (By.XPATH, '//*[@id="searchbutton"]')
    )).click()
    print("Botão de pesquisa clicado.")

    # ------------------------------------------
    # PASSO 5: Download do Excel
    # ------------------------------------------
    wait.until(EC.element_to_be_clickable((By.XPATH, '//*[@id="fullReportTableSeg_wrapper"]/div[1]/div[2]/div[2]/div/button/span'))).click()
    print("Botão de download do Excel clicado.")

    # ------------------------------------------
    # PASSO 6: Esperar download concluir
    # ------------------------------------------
    start_time = time.time()
    print("Aguardando download do arquivo...")
    while True:
        latest_file = get_latest_file()
        if latest_file and not latest_file.endswith('.crdownload'):
            print(f"Download concluído. Arquivo: {latest_file}")
            break
        if time.time() - start_time > 60:
            raise TimeoutError("Tempo excedido para download")
        time.sleep(2)

    # ------------------------------------------
    # PASSO 7: Importar para DataFrame
    # ------------------------------------------
    df = pd.read_excel(latest_file)
    print("\nDataFrame criado com sucesso!")
    print(f"Total de linhas: {len(df)}")
    print(f"Colunas: {list(df.columns)}")

except Exception as e:
    print(f"\nErro durante a execução: {str(e)}")
    driver.save_screenshot("erro_execucao.png")
    print("Screenshot do erro salvo como erro_execucao.png")

finally:
    driver.quit()
    print("Navegador fechado.")

# ==============================================
# TRABALHE COM O DATAFRAME (EXEMPLO)
# ==============================================
# Exibir primeiras linhas
print("\nVisualização dos dados:")
print(df.head())

# Exemplo de análise
if not df.empty:
    print("\nEstatísticas básicas:")
    print(df.describe())
else:
    print("\nDataFrame vazio - verifique o processo de download")
